// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package DI

import (
	"fmt"
	"github.com/google/wire"
)

// Injectors from google_wire_interface.go:

func InitBar() string {
	myFooer := provideMyFooer()
	string2 := provideBar(myFooer)
	return string2
}

// Injectors from google_wire_struct.go:

func InitializeEvent() Event {
	message := NewMessage()
	greeter := NewGreeter(message)
	event := NewEvent(greeter)
	return event
}

func InitEve() Eve {
	msg := NewMsg()
	eve := NewEve(msg)
	return eve
}

// google_wire_interface.go:

type Fooer interface {
	Foo() string
}

type MyFooer string

func (b *MyFooer) Foo() string {
	return string(*b)
}

func provideMyFooer() *MyFooer {
	b := new(MyFooer)
	*b = "Hello, World!"
	return b
}

type Bar string

func provideBar(f Fooer) string {

	return f.Foo()
}

var Set = wire.NewSet(
	provideMyFooer, wire.Bind(new(Fooer), new(*MyFooer)), provideBar)

func Google_Wire_Interface_Exam() {
	fmt.Println("Google_Wire_Interface_Exam: before invoke")
	b := InitBar()
	fmt.Println(b)
}

// google_wire_struct.go:

type Message string

func NewMessage() Message {
	fmt.Println("NewMessage()")
	return Message("Hi there!")
}

func NewGreeter(m Message) Greeter {
	fmt.Println("NewGreeter()")
	return Greeter{Message: m}
}

type Greeter struct {
	Message Message // <- adding a Message field
}

func (g Greeter) Greet() Message {
	return g.Message
}

func NewEvent(g Greeter) Event {
	return Event{Greeter: g}
}

type Event struct {
	Greeter Greeter // <- adding a Greeter field
}

func (e Event) Start() {
	msg := e.Greeter.Greet()
	fmt.Println(msg)
}

type Msg string

func NewMsg() Msg {
	fmt.Println("NewMsg()")
	return Msg("a msg to the world")
}

type Eve struct {
	M Msg
}

func NewEve(m Msg) Eve {
	fmt.Println("NewEve()")
	return Eve{M: m}
}

func (e Eve) PrintEve() {
	fmt.Println("carry message: ", e.M)
}

func globalSet() wire.ProviderSet {
	return wire.NewSet(
		NewMsg,
		NewEve,
		NewEvent,
		NewGreeter,
		NewMessage,
	)
}

func Google_Wire_Struct_Exam() {
	fmt.Println("Google_Wire_Struct_Exam: before invoke")
	e := InitializeEvent()
	e.Start()
}

func Google_Wire_Struct_Global() {
	fmt.Println("Google_Wire_Struct_Global: before invoke")
	e := InitEve()
	e.PrintEve()
}
